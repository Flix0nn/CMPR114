import tkinter as tk
from tkinter import messagebox
import sqlite3

# Function to save data
def save_data():
    last_name = last_name_entry.get()
    first_name = first_name_entry.get()
    age = age_entry.get()
    address = address_entry.get()
    city = city_entry.get()
    state = state_entry.get()
    zip_code = zip_code_entry.get()

    # Connect to the SQLite database
    conn = sqlite3.connect('/Users/tobisho/cmpr114/class exercise 8/CLSEXER8.db')
    c = conn.cursor()

    # Insert the data into the table
    c.execute('INSERT INTO customers (last_name, first_name, age, address, city, state, zip_code) VALUES (?, ?, ?, ?, ?, ?, ?)',
              (last_name, first_name, age, address, city, state, zip_code))

    # Commit the changes and close the connection
    conn.commit()
    conn.close()

    # Clear the input fields
    last_name_entry.delete(0, tk.END)
    first_name_entry.delete(0, tk.END)
    age_entry.delete(0, tk.END)
    address_entry.delete(0, tk.END)
    city_entry.delete(0, tk.END)
    state_entry.delete(0, tk.END)
    zip_code_entry.delete(0, tk.END)

# Function to fetch data
def fetch_data():
    # Connect to the SQLite database
    conn = sqlite3.connect('/Users/tobisho/cmpr114/class exercise 8/CLSEXER8.db')
    c = conn.cursor()

    # Fetch all records from the customers table
    c.execute('SELECT * FROM customers')
    data = c.fetchall()
    
    # Print the fetched data
    for row in data:
        print(row)

    # Close the connection
    conn.close()

# Function to delete a record by ID
def delete_by_id():
    customer_id = id_entry.get()
    
    # Connect to the SQLite database
    conn = sqlite3.connect('/Users/tobisho/cmpr114/class exercise 8/CLSEXER8.db')
    c = conn.cursor()

    # Delete the record with the specified ID
    c.execute('DELETE FROM customers WHERE id = ?', (customer_id,))

    # Commit the changes and close the connection
    conn.commit()
    conn.close()

    # Clear the input field
    id_entry.delete(0, tk.END)

# Function to update the last name by ID
def update_last_name_by_id():
    customer_id = id_entry.get()
    new_last_name = last_name_entry.get()
    
    # Connect to the SQLite database
    conn = sqlite3.connect('/Users/tobisho/cmpr114/class exercise 8/CLSEXER8.db')
    c = conn.cursor()

    # Update the last name for the specified ID
    c.execute('UPDATE customers SET last_name = ? WHERE id = ?', (new_last_name, customer_id))

    # Commit the changes and close the connection
    conn.commit()
    conn.close()

    # Clear the input fields
    id_entry.delete(0, tk.END)
    last_name_entry.delete(0, tk.END)

# Function to insert data into orders table
def insert_order_data():
    # Connect to the SQLite database
    conn = sqlite3.connect('/Users/tobisho/cmpr114/class exercise 8/CLSEXER8.db')
    c = conn.cursor()

    # Insert data into orders table
    c.execute('INSERT INTO orders VALUES (100, 1, "product 1")')

    # Commit the changes and close the connection
    conn.commit()
    conn.close()

    messagebox.showinfo("Success", "Order data inserted successfully!")

# Function to display the JOIN statement results in a message box
def show_join_results():
    # Connect to the SQLite database
    conn = sqlite3.connect('/Users/tobisho/cmpr114/class exercise 8/CLSEXER8.db')
    c = conn.cursor()

    # Execute the JOIN statement
    c.execute('''
    SELECT Customers.id, last_name, first_name, age, orderid, product, Rep_Name
    FROM Customers
    JOIN Orders ON Customers.ID = Orders.id
    JOIN Representative ON Customers.ID = Representative.ID
    ''')
    data = c.fetchall()
    
    # Format the data for display
    results = "\n".join([str(row) for row in data])

    # Display the results in a message box
    messagebox.showinfo("Join Statement Results", results)

    # Close the connection
    conn.close()

# Create the main window
window = tk.Tk()
window.title("User Registration")

# Create labels and entry fields for user information
last_name_label = tk.Label(window, text="Last Name:")
last_name_label.pack()
last_name_entry = tk.Entry(window)
last_name_entry.pack()

first_name_label = tk.Label(window, text="First Name:")
first_name_label.pack()
first_name_entry = tk.Entry(window)
first_name_entry.pack()

age_label = tk.Label(window, text="Age:")
age_label.pack()
age_entry = tk.Entry(window)
age_entry.pack()

address_label = tk.Label(window, text="Address:")
address_label.pack()
address_entry = tk.Entry(window)
address_entry.pack()

city_label = tk.Label(window, text="City:")
city_label.pack()
city_entry = tk.Entry(window)
city_entry.pack()

state_label = tk.Label(window, text="State:")
state_label.pack()
state_entry = tk.Entry(window)
state_entry.pack()

zip_code_label = tk.Label(window, text="Zip code:")
zip_code_label.pack()
zip_code_entry = tk.Entry(window)
zip_code_entry.pack()

id_label = tk.Label(window, text="ID:")
id_label.pack()
id_entry = tk.Entry(window)
id_entry.pack()

# Create buttons to save, fetch, delete, update data, insert order data, and show join results
save_button = tk.Button(window, text="Save", command=save_data)
save_button.pack()

fetch_button = tk.Button(window, text="Fetch Data", command=fetch_data)
fetch_button.pack()

delete_button = tk.Button(window, text="Delete by ID", command=delete_by_id)
delete_button.pack()

update_button = tk.Button(window, text="Update Last Name by ID", command=update_last_name_by_id)
update_button.pack()

insert_order_button = tk.Button(window, text="Insert Order Data", command=insert_order_data)
insert_order_button.pack()

join_button = tk.Button(window, text="Show Join Results", command=show_join_results)
join_button.pack()

# Start the Tkinter event loop
window.mainloop()
